//syntax = "proto3";
//
//package grpc;
//
//// Пустые сообщения. В gRPC обязательно у любой функций должен быть вход и выход.
//message Empty {}
//message Nothing {}
//
//// Сообщение, которое мы будем отправлять
//// Не очень красиво, что оно называется Message, но для чата получается логично
//message Message {
//    string author = 1;
//    string text = 2;
//}
//
//// Сервис чата
//service Chatting {
//    // Функция, возвращающая ПОТОК сообщений чата
//    rpc MessageStream (Empty) returns (stream Message);
//    // Функция отправки сообщения в чат
//    rpc SendMessage (Message) returns (Nothing);
//}

// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//syntax = "proto3";
//
//option java_multiple_files = true;
//option java_package = "io.grpc.examples.helloworld";
//option java_outer_classname = "HelloWorldProto";
//option objc_class_prefix = "HLW";
//
//package helloworld;
//
//// The greeting service definition.
//service Greeter {
//  // Sends a greeting
//  rpc SayHello (HelloRequest) returns (HelloReply) {}
//
//  rpc SayHelloStreamReply (HelloRequest) returns (stream HelloReply) {}
//
//  rpc SayHelloBidiStream (stream HelloRequest) returns (stream HelloReply) {}
//}
//
//// The request message containing the user's name.
//message HelloRequest {
//  string name = 1;
//}
//
//// The response message containing the greetings
//message HelloReply {
//  string message = 1;
//}

syntax = "proto3";

package banpick;

message Empty {}

service BanPick {
    rpc CreateTournament(Empty) returns (TourId);
    rpc GetTournament(TourId) returns (Tournament);
    rpc EditTournament(Tournament) returns (TourId);
}

message Tournament {
    int32 tournamentId = 1;
    string name = 2;
    repeated Person people = 3;
    repeated StartPlaces startPlaces = 4;
    repeated Match matches = 5;
}

message Match {
    int32 match_id = 1;
    Person per_1 = 2;
    Person per_2 = 3;
    string per1_time = 4;
    string per2_time = 5;
    bool per1_is_tech = 6;
    bool per2_is_tech = 7;
    int32 winner = 8;
}

message Person {
    int32 personId = 1;
    string personName = 2;
}


message StartPlaces {
    repeated Person participants = 1;
}


message TourId {
    int32 tour_id = 1;
}


